// src/App.js
import React, { useEffect, useState } from 'react';
import Lobby from './Lobby';
import GameBoard from './GameBoard';
import ScoreBoard from './ScoreBoard';
import Timer from './Timer';
import initSocket from './api';

const App = () => {
  const [socket, setSocket] = useState(null);
  const [myId, setMyId] = useState(null);
  const [inLobby, setInLobby] = useState(true);
  const [lobbyPlayers, setLobbyPlayers] = useState({});
  const [gameState, setGameState] = useState(null);


  useEffect(() => {
    const ws = initSocket();
    setSocket(ws);
    ws.onmessage = (evt) => {
      const msg = JSON.parse(evt.data);
      switch (msg.type) {
        // –ü—Ä–∏—Å–≤–æ–∏–ª–∏ —Å–≤–æ–π ID
        case 'lobby/joined':
          setMyId(msg.id);
          break;

        // –û–±–Ω–æ–≤–∏–ª–∏ —Å–æ—Å—Ç–∞–≤ –ª–æ–±–±–∏
        case 'lobby/update':
          setLobbyPlayers(msg.players);
          break;

        // –í—Å–µ –≥–æ—Ç–æ–≤—ã ‚Äî —Å—Ç–∞—Ä—Ç –∏–≥—Ä—ã
        case 'game/start':
          setInLobby(false);
          break;

        // –ò–≥—Ä–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        case 'state':
          setGameState(msg.state);
          break;

        case 'lobby/reset':
          // –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç –≤—Å–µ—Ö –≤ –ª–æ–±–±–∏:
          setInLobby(true);
          setGameState(null);
          break;

        default:
          console.warn('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è:', msg.type);
      }
    };
    return () => ws.close();
  }, []);

  // –∏–≥—Ä–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
  const handleOpen = (x, y) => {
    socket.send(JSON.stringify({
      type: 'game/open',
      payload: { x, y, player: myId }
    }));
  };

  const handleFlag = (x, y) => {
    socket.send(JSON.stringify({
      type: 'game/flag',
      payload: { x, y, player: myId }
    }));
  };

  // –ø—Ä–∏ —Ä–µ—Å—Ç–∞—Ä—Ç–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º UI –≤ –ª–æ–±–±–∏
  const handleRestart = () => {
    socket.send(JSON.stringify({ type: 'game/restart' }));
    // –µ—Å–ª–∏ –≤—ã —Ö—Ä–∞–Ω–∏–ª–∏ gameState –≤ localStorage, —Ç–æ–∂–µ —Å–±—Ä–æ—Å—å—Ç–µ –µ–≥–æ:
    localStorage.removeItem('sapper-state');
  };

  // —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –æ—á–∫–∞–º: [ [id, score], ... ], —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é –æ—á–∫–æ–≤
  const ranking = gameState
    ? Object.entries(gameState.scores)
      .sort(([idA, scoreA], [idB, scoreB]) => {
        const explodedA = gameState.exploded === idA;
        const explodedB = gameState.exploded === idB;
        // —Å–Ω–∞—á–∞–ª–∞ –Ω–µ‚Äë–≤–∑–æ—Ä–≤–∞–≤—à–∏–µ—Å—è (false) –≤—ã—à–µ, –≤–∑–æ—Ä–≤–∞–≤—à–∏–µ—Å—è (true) –Ω–∏–∂–µ
        if (explodedA !== explodedB) {
          return explodedA ? 1 : -1;
        }
        // –µ—Å–ª–∏ –æ–±–∞ –≤ –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚Äî —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é –æ—á–∫–æ–≤
        return scoreB - scoreA;
      })
    : [];

  if (inLobby) {
    return (
      <Lobby
        socket={socket}
        myId={myId}
        players={lobbyPlayers}
      />
    );
  }

  if (!gameState) {
    return <div>–ó–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä—ã‚Ä¶</div>;
  }

  return (
    <div className="app">
      <h1>–°–∞–ø—ë—Ä: –ö–æ—Ä–æ–ª–µ–≤—Å–∫–∞—è –±–∏—Ç–≤–∞</h1>
      <Timer timeLeft={gameState['time-left']} />
      <ScoreBoard players={lobbyPlayers} scores={gameState.scores} />
      <GameBoard board={gameState.board}
        onOpen={handleOpen}
        onFlag={handleFlag} />
      {gameState.status === "ended" && (
        <div className="overlay">
          <h2>–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!</h2>
          <table className="results-table">
            <thead>
              <tr><th>‚Ññ</th><th>–ò–≥—Ä–æ–∫</th><th>–†–µ–∑—É–ª—å—Ç–∞—Ç</th></tr>
            </thead>
            <tbody>
              {ranking.map(([id, score], idx) => {
                const nick = lobbyPlayers[id]?.nick || id;
                const cell = (gameState.exploded === id)
                  ? 'üí•'
                  : score;
                return (
                  <tr key={id} className={id === myId ? 'highlight' : ''} >
                    <td>{idx + 1}</td>
                    <td>{nick}</td>
                    <td>{cell}</td>
                  </tr>
                );
              })}
            </tbody>
          </table>
          <button onClick={handleRestart} className="restart-button">
            –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
          </button>
        </div>
      )}
    </div>
  );
};

export default App;
